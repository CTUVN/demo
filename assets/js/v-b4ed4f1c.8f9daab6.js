(self.webpackChunk=self.webpackChunk||[]).push([[5159],{515:(e,l,t)=>{"use strict";t.r(l),t.d(l,{data:()=>r});const r={key:"v-b4ed4f1c",path:"/advanced/architecture.html",title:"Architecture",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Overview",slug:"overview",children:[]},{level:2,title:"Core Process and Hooks",slug:"core-process-and-hooks",children:[]}],filePathRelative:"advanced/architecture.md",git:{}}},7782:(e,l,t)=>{"use strict";t.r(l),t.d(l,{default:()=>y});var r=t(6252);const i=(0,r.uE)('<h1 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture" aria-hidden="true">#</a> Architecture</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p><img src="/images/guide/vuepress-architecture-overview.png" alt="vuepress-architecture-overview"></p><p>The above figure shows a brief overview of the VuePress architecture:</p><ul><li>Node App will generate temp files, including the layouts, pages, routes, etc.</li><li>Bundler will handle Client App together with the temp files, just like a common Vue SPA.</li></ul><p>As a developer, you must be aware of that VuePress has two main parts: <strong>Node App</strong> and <strong>Client App</strong>, which is important when developing plugins and themes:</p><ul><li>The entry file of a plugin or a theme will be loaded in Node App. So you need to use CommonJS format for them.</li><li>Client files will be loaded in Client App, which will be handled by bundler. For example, layouts, components, app setup files, app enhance files, etc. You&#39;d better use ESM format for them.</li></ul><h2 id="core-process-and-hooks" tabindex="-1"><a class="header-anchor" href="#core-process-and-hooks" aria-hidden="true">#</a> Core Process and Hooks</h2><p><img src="/images/guide/vuepress-core-process.png" alt="vuepress-core-process"></p>',9),a=(0,r.Uk)("The above figure shows the core process of VuePress Node App and the hooks of "),n=(0,r.Uk)("Plugin API"),o=(0,r.Uk)(":"),s=(0,r.Uk)("In the "),u=(0,r.Wm)("strong",null,"init",-1),d=(0,r.Uk)(" stage: "),h=(0,r.Wm)("li",null,"Theme and plugins will be loaded. That means all the plugins should be used before initialization.",-1),p=(0,r.Uk)("As we are using markdown-it to parse the markdown file, the "),c=(0,r.Uk)("extendsMarkdown"),m=(0,r.Uk)(" hook will be processed before loading page files."),g=(0,r.Uk)("Page files will be loaded, and "),f=(0,r.Uk)("extendsPageOptions"),w=(0,r.Uk)(" hook will be processed to create pages."),k=(0,r.Wm)("li",null,[(0,r.Uk)("In the "),(0,r.Wm)("strong",null,"prepare"),(0,r.Uk)(" stage: "),(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"Temp files will be generated, so all hooks related to client files will be processed here.")])],-1),v=(0,r.Uk)("In the "),b=(0,r.Wm)("strong",null,"dev / build",-1),U=(0,r.Uk)(" stage: "),W=(0,r.Uk)("Bundler will be resolved. The "),A=(0,r.Uk)("alias"),P=(0,r.Uk)(" and "),x=(0,r.Uk)("define"),C=(0,r.Uk)(" hooks depend on bundler configuration, so they will be processed here."),y={render:function(e,l){const t=(0,r.up)("RouterLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[i,(0,r.Wm)("p",null,[a,(0,r.Wm)(t,{to:"/reference/plugin-api.html"},{default:(0,r.w5)((()=>[n])),_:1}),o]),(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[s,u,d,(0,r.Wm)("ul",null,[h,(0,r.Wm)("li",null,[p,(0,r.Wm)(t,{to:"/reference/plugin-api.html#extendsmarkdown"},{default:(0,r.w5)((()=>[c])),_:1}),m]),(0,r.Wm)("li",null,[g,(0,r.Wm)(t,{to:"/reference/plugin-api.html#extendspageoptions"},{default:(0,r.w5)((()=>[f])),_:1}),w])])]),k,(0,r.Wm)("li",null,[v,b,U,(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[W,(0,r.Wm)(t,{to:"/reference/plugin-api.html#alias"},{default:(0,r.w5)((()=>[A])),_:1}),P,(0,r.Wm)(t,{to:"/reference/plugin-api.html#define"},{default:(0,r.w5)((()=>[x])),_:1}),C])])])])],64)}}}}]);